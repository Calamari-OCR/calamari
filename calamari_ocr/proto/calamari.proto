syntax = "proto3";

// Data required for resuming a training process
message CheckpointParams {
    int32 version = 25;                                 // Rolling version

    ModelParams model = 1;

    int32 processes = 2;
    int32 max_iters = 3;
    bool skip_invalid_gt = 4;
    float display = 5;
    int32 stats_size = 6;
    int32 batch_size = 7;
    float checkpoint_frequency = 8;
    string output_dir = 9;
    string output_model_prefix = 22;

    bool data_aug_retrain_on_original = 23;        // Retrain the model with only the non augmented data in a second run
    int32 current_stage = 24;                      // Current training progress: 0 standard, 1 retraining on non aug.

    // params for early stopping
    float early_stopping_frequency = 15;                // How often to check on validation data
    int32 early_stopping_nbest = 16;                    // How many models must be worse to stop
    string early_stopping_best_model_prefix = 17;       // Prefix for the best model
    string early_stopping_best_model_output_dir = 21;   // Where to store the best model


    // params for storing the training process
    int32 iter = 10;
    repeated float loss_stats = 11;
    repeated float ler_stats = 12;
    repeated float dt_stats = 13;
    float total_time = 14;
    float early_stopping_best_accuracy = 18;        // Current best model accuracy during training
    int32 early_stopping_best_cur_nbest = 19;       // How often was a worse model found since the last best model
    int32 early_stopping_best_at_iter = 20;         // Best model was found at iter?
}

message DoubleMatrix {
    uint32 rows = 1;
    uint32 cols = 2;
    repeated double data = 3 [packed=true];
}

message IntVec2D {
    int32 x = 1;
    int32 y = 2;
}

message LayerParams {
    enum Type {
        CONVOLUTIONAL = 0;
        MAX_POOLING = 1;
        LSTM = 2;
    }

    enum LSTMDirection {
        BIDIRECTIONAL_LSTM = 0;
    }

    Type type = 1;

    // conv/pool
    int32 filters = 2;
    IntVec2D kernel_size = 3;
    IntVec2D stride = 4;

    // LSTM
    int32 hidden_nodes = 5;
    bool peepholes = 6;
    LSTMDirection lstm_direction = 7;
}

message NetworkParams {
    enum SolverType {
        MOMENTUM_SOLVER = 0;
        ADAM_SOLVER = 1;
    }

    enum CTCType {
        CTC_DEFAULT = 0;
        CTC_FUZZY = 1;
    }

    enum ClippingMode {
        CLIP_AUTO = 0;
        CLIP_NONE = 1;
        CLIP_CONSTANT = 2;
    }


    BackendParams backend = 8;

    repeated LayerParams layers = 1;
    SolverType solver = 2;
    float learning_rate = 11;
    float momentum = 3;
    float dropout = 5;

    int32 features = 6;
    int32 classes = 7;

    bool ctc_merge_repeated = 9;
    CTCType ctc = 10;

    ClippingMode clipping_mode = 12;
    float clipping_constant = 13;
}

// Backend data
message BackendParams {
    enum Type {
        TENSORFLOW = 0;
    }

    Type type = 1;
    bool cudnn = 2;
    int32 random_seed = 3;


    // additional backend params for
    // - tensorflow
    string fuzzy_ctc_library_path = 4;
    int32 num_inter_threads = 5;
    int32 num_intra_threads = 6;
}

// Data required to run a model
message ModelParams {
    NetworkParams network = 2;
    int32 line_height = 3;
    DataPreprocessorParams data_preprocessor = 4;
    TextProcessorParams text_preprocessor = 5;
    TextProcessorParams text_postprocessor = 6;
    CodecParams codec = 7;
}

message DataPreprocessorParams {
    enum Type {
        DEFAULT_NORMALIZER = 0;
        MULTI_NORMALIZER = 1;
        NOOP_NORMALIZER = 2;
        RANGE_NORMALIZER = 3;
        CENTER_NORMALIZER = 4;
        FINAL_PREPARATION = 5;
        SCALE_TO_HEIGHT = 6;
    }

    enum Binarization {
        GRAY = 0;
        OTSU = 1;
    }

    Type type = 1;
    repeated DataPreprocessorParams children = 2;

    int32 line_height = 3;
    int32 range = 4;
    int32 smoothness = 5;
    int32 pad = 6;
    Binarization binarization = 7;

    bool no_normalize = 8;
    bool no_invert = 9;
    bool no_transpose = 10;
    int32 pad_value = 11;
}

message TextNormalizerReplacementParams {
    string old = 1;
    string new = 2;
    bool regex = 3;     // Match as reqular expression
}

message TextProcessorParams {
    enum Type {
        DEFAULT_NORMALIZER = 0;
        DEFAULT_PRE_NORMALIZER = 1;
        DEFAULT_POST_NORMALIZER = 2;
        MULTI_NORMALIZER = 3;
        NOOP_NORMALIZER = 4;
        STRIP_NORMALIZER = 5;
        BIDI_NORMALIZER = 6;
        TEXT_NORMALIZER = 7;
        TEXT_REGULARIZER = 8;
        STR_TO_CHAR_LIST = 9;
    }

    Type type = 1;
    repeated TextProcessorParams children = 2;

    // Bidirectional text processor
    enum BidiDirection {
        BIDI_AUTO = 0;
        BIDI_LTR = 1;
        BIDI_RTL = 2;
    }
    BidiDirection bidi_direction = 3;

    // normalizer (see https://docs.python.org/3/library/unicodedata.html)
    enum UnicodeNormalizationType {
        NFC = 0;
        NFKC = 1;
        NFD = 2;
        NFKD = 3;
    }
    UnicodeNormalizationType unicode_normalization = 4;
    repeated TextNormalizerReplacementParams replacements = 5;

    // str to char available characters
    repeated string characters = 6;
}


message CodecParams {
    repeated string charset = 1;
}


message VoterParams {
    enum Type {
        SEQUENCE_VOTER = 0;
        CONFIDENCE_VOTER_DEFAULT_CTC = 1;
        CONFIDENCE_VOTER_FUZZY_CTC = 2;
    }

    Type type = 1;
    int32 blank_index = 2;
}

message PredictionCharacter {
    string char = 1;
    int32 label = 2;
    float probability = 3;
}

message PredictionPosition {
    repeated PredictionCharacter chars = 1;         // All characters at this position with its individual probabilities
    int32 local_start = 2;                          // Start of the character in the prediction
    int32 local_end = 3;                            // End of the character in the prediction
    int32 global_start = 4;                         // Start of the character in the image (this is usually the center of a letter)
    int32 global_end = 5;                           // End of the character in the image (this is usually the center of a letter)
}

message Prediction {
    string id = 1;                                  // Use this as hint when saving several predictions into one file
    string sentence = 2;                            // Postprocessed sentence
    repeated int32 labels = 3;                      // [Optional] The labels (depending on the codec)
    repeated PredictionPosition positions = 4;      // The individual predictions for each position
    DoubleMatrix logits = 5;                        // The full prediction matrix
    float total_probability = 6;
    float avg_char_probability = 9;                 // Average character probability
    bool is_voted_result = 7;                       // A voted result does not have logits

    string line_path = 8;                           // [Optional] The original path to the corresponding image file
}

message Predictions {
    repeated Prediction predictions = 1;
    string line_path = 2;
}